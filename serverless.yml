# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!


service: serverless-todos-rest-api
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '3'

custom:
  cors:
    origin: "*"
    headers:
      - Authorization
      - Content-Type
      - Access-Control-Allow-Headers
      - Access-Control-Allow-Origin
  authorizer:
    name: authorizerFunction
    resultTtlInSeconds: 0
    identitySource: method.request.header.Authorization
    type: token

provider:
  name: aws
  runtime: nodejs14.x

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iam:
#    role:
#      statements:
#        - Effect: "Allow"
#          Action:
#            - "s3:ListBucket"
#          Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#        - Effect: "Allow"
#          Action:
#            - "s3:PutObject"
#          Resource:
#            Fn::Join:
#              - ""
#              - - "arn:aws:s3:::"
#                - "Ref" : "ServerlessDeploymentBucket"
#                - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

functions:
  # hello:
  #   handler: handler.hello

    # Custom Lambda Authorizer Function
  authorizerFunction:
    handler: middleware/auth.validateAuth

  create:
    handler: src/handler/addCartItems.addCartItems
    events:
      - http:
          path: addCartItems
          method: post
          cors: true
    timeout: 20
          authorizer: ${self:custom.authorizer}
  update:
    handler: src/handler/updateCartItems.updateCartItems
    events:
      - http:
          path: updateCart
          method: put
          cors: true
    timeout: 20
          authorizer: ${self:custom.authorizer}
    
    
  delete:
    handler: src/handler/deleteCartItems.deleteCartItem
    events:
      - http:
          path: deleteCartItem
          method: delete
          cors: true
    timeout: 20
          # authorizer: ${self:custom.authorizer}
  updateWallet: 
    handler: src/handler/walletHandler/updateWalletItems.updateWallet
    events:
      - http:
          path: updateWallet
          method: put
          cors: true
    timeout: 20
          # authorizer: ${self:custom.authorizer}
  insertOrder: 
    handler: src/handler/orderTableHandler/insertOrderItems.insertOrderItems
    events:
      - http:
          path: insertOrder
          method: post
          cors: true
    timeout: 20
  insertPayment: 
    handler: src/handler/paymentTableHandler/insertPaymentItems.insertPaymentItems
    events:
      - http:
          path: insertPayment
          method: post
          cors: true
    timeout: 20
  insertOrderItems: 
    handler: src/handler/orderItemsHandler/insertOrderItems.insertOrderItems
    events:
      - http:
          path: insertOrderItems
          method: post
          cors: true
    timeout: 20

  updateDeliveryDetails:
    handler: src/handler/deliveryAgentHandler/updateAgentDetails.updateDeliveryAgentDetails
    events:
      - http:
          path: updateDeliveryAvailability
          method: put
          cors: true
    timeout: 20

  updateOrderDetails:
    handler: src/handler/orderTableHandler/updateOrder.updateOrderDetails
    events:
      - http:
          path: updateOrderStatus
          method: put
          cors: true
    timeout: 20
  updateRestaurantAvailability:
    handler: src/handler/restaurantHandler/updateRestaurantAvailability.updateRestaurantDetails
    events:
      - http:
          path: updateRestaurantAvailability
          method: put
          cors: true
    timeout: 20
  updateMenuItemPrice:
    handler: src/handler/MenuItemsHandler/updateMenuList.updateMenuItemsPrice
    events:
      - http:
          path: updateMenuItemsPrice
          method: put
          cors: true
    timeout: 20

  deleteMenuItem:
    handler: src/handler/MenuItemsHandler/deleteMenuItem.deleteMenuItem
    events:
      - http:
          path: deleteMenuItem
          method: delete
          cors: true
    timeout: 20
  createMenuItem:
    handler: src/handler/MenuItemsHandler/addMenuItem.addMenuItems
    events:
      - http:
          path: addMenuItem
          method: post
          cors: true
    timeout: 20
  deleteRestaurant:
    handler: src/handler/restaurantHandler/deleteRestaurant.deleteRestaurant
    events:
      - http:
          path: deleteRestaurant
          method: delete
          cors: true
    timeout: 20
  addRestaurant:
    handler: src/handler/restaurantHandler/addRestaurant.addRestaurants
    events:
      - http:
          path: addRestaurant
          method: post
          cors: true
    timeout: 20
  addRestaurantAddress:
    handler: src/handler/restaurantAddressHandler/addRestaurantAddress.addRestaurantAddress
    events:
      - http:
          path: addRestaurantAddress
          method: post
          cors: true
    timeout: 20
  addDeliveryAgent:
    handler: src/handler/deliveryAgentHandler/addDeliveryAgent.addDeliveryAgent
    events:
      - http:
          path: addDeliveryAgent
          method: post
          cors: true
    timeout: 20
  deleteAgent:
    handler: src/handler/deliveryAgentHandler/deleteAgent.deleteAgent
    events:
      - http:
          path: deleteAgent
          method: delete
          cors: true
    timeout: 20
  createDeliveryInstructions:
    handler: src/handler/deliveryInstructionHandler/insertDeliveryInstructions.deliveryInstructions
    events:
      - http:
          path: addDeliveryInstructions
          method: post
          cors: true
  createRestaurantInst:
    handler: src/handler/restaurantInstructionHandler/insertRestaurantInstructions.restaurantCookingInstructions
    events:
      - http:
          path: addRestaurantCookingInstructions
          method: post
          cors: true
  createRestaurantRatings:
    handler: src/handler/restaurantRatingHandler/insertRestaurantrating.restaurantRating
    events:
      - http:
          path: addRestaurantratings
          method: post
          cors: true
  createDeliveryRatings:
    handler: src/handler/deliveryRatingHandler/insertDeliveryRating.deliveryRating
    events:
      - http:
          path: addDeliveryRatings
          method: post
          cors: true
  updateMenuItemAvaialability:
    handler: src/handler/MenuItemsHandler/updateMenuAvaialbility.updateMenuItemsAvailability
    events:
      - http:
          path: updateMenuAvailability
          method: put
          cors: true
    timeout: 20

  updateAgentId:
    handler: src/handler/orderTableHandler/updateAgentId.updateAgent
    events:
      - http:
          path: updateAgentId
          method: put
          cors: true
    timeout: 20


          # authorizer: ${self:custom.authorizer}



  

  

plugins:
  - serverless-offline

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
